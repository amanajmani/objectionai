import { groq } from '../db/groq.js';

export class LegalDraftAgent {
  constructor() {
    this.name = 'LegalDraftAgent';
    this.version = '1.0';
    this.capabilities = [
      'cease_and_desist_generation',
      'dmca_takedown_notices',
      'legal_correspondence',
      'jurisdiction_compliance'
    ];
  }

  async generateDocument({ 
    documentType, 
    ipAsset, 
    infringementEvidence, 
    jurisdiction = 'US',
    tone = 'professional',
    caseDetails 
  }) {
    console.log(`[LegalDraftAgent] Generating ${documentType} for IP asset: ${ipAsset.title}`);
    
    try {
      const prompt = this.buildPrompt({
        documentType,
        ipAsset,
        infringementEvidence,
        jurisdiction,
        tone,
        caseDetails
      });

      const response = await groq.chat.completions.create({
        model: 'llama3-70b-8192', // Use Groq's most capable model
        messages: [
          {
            role: 'system',
            content: this.getSystemPrompt(documentType, jurisdiction)
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.3, // Lower temperature for legal documents
        max_tokens: 2000,
      });

      const generatedContent = response.choices[0].message.content;
      
      console.log(`[LegalDraftAgent] Successfully generated ${documentType}`);
      
      return {
        content: generatedContent,
        metadata: {
          agent: this.name,
          version: this.version,
          documentType,
          jurisdiction,
          tone,
          tokensUsed: response.usage.total_tokens,
          generatedAt: new Date().toISOString()
        }
      };
    } catch (error) {
      console.error(`[LegalDraftAgent] Error generating document:`, error);
      throw new Error(`Failed to generate ${documentType}: ${error.message}`);
    }
  }

  getSystemPrompt(documentType, jurisdiction) {
    const basePrompt = `You are a specialized legal document drafting AI assistant. You generate professional, legally sound documents for intellectual property enforcement.

CRITICAL REQUIREMENTS:
- Generate documents that are professional and legally appropriate
- Include all necessary legal elements for ${jurisdiction} jurisdiction
- Use proper legal terminology and formatting
- Ensure compliance with applicable laws and regulations
- Include clear demands and deadlines
- Maintain professional tone throughout

DOCUMENT TYPE: ${documentType.toUpperCase()}
JURISDICTION: ${jurisdiction}`;

    const typeSpecificPrompts = {
      cease_and_desist: `
CEASE AND DESIST SPECIFIC REQUIREMENTS:
- Clear identification of intellectual property rights
- Specific description of infringing activities
- Legal basis for the claim
- Demand to cease infringing activities
- Consequences of non-compliance
- Reasonable deadline for response (typically 10-14 days)
- Contact information for resolution`,

      dmca_takedown: `
DMCA TAKEDOWN SPECIFIC REQUIREMENTS:
- Identification of copyrighted work
- Location of infringing material (URLs)
- Statement of good faith belief
- Statement under penalty of perjury
- Contact information of copyright owner
- Physical or electronic signature placeholder
- Compliance with DMCA Section 512(c)(3)`,

      licensing_inquiry: `
LICENSING INQUIRY SPECIFIC REQUIREMENTS:
- Professional introduction and credentials
- Clear identification of IP rights
- Specific licensing terms being sought
- Proposed compensation structure
- Timeline for response
- Contact information for negotiations`
    };

    return basePrompt + (typeSpecificPrompts[documentType] || '');
  }

  buildPrompt({ documentType, ipAsset, infringementEvidence, jurisdiction, tone, caseDetails }) {
    let evidenceDetails = '';
    
    if (infringementEvidence) {
      evidenceDetails = `
INFRINGEMENT EVIDENCE:
- Target URL: ${infringementEvidence.url}
- Risk Score: ${infringementEvidence.riskScore}%
- Analysis Summary: ${infringementEvidence.summary}
- Screenshot Available: ${infringementEvidence.screenshotUrl ? 'Yes' : 'No'}
- Detection Date: ${infringementEvidence.detectedAt}
- Auto-Generated Case: ${infringementEvidence.autoGenerated ? 'Yes' : 'No'}
- Evidence Count: ${infringementEvidence.evidenceCount || 1}`;

      // Add comprehensive evidence details (Part 1 enhancement)
      if (infringementEvidence.comprehensiveEvidence && infringementEvidence.comprehensiveEvidence.length > 0) {
        evidenceDetails += `

COMPREHENSIVE EVIDENCE PACKAGE:`;
        
        infringementEvidence.comprehensiveEvidence.forEach((evidence, index) => {
          evidenceDetails += `
${index + 1}. Evidence Type: ${evidence.type}`;
          
          if (evidence.type === 'screenshot' && evidence.url) {
            evidenceDetails += `
   - Screenshot URL: ${evidence.url}
   - Visual evidence of infringement captured`;
          }
          
          if (evidence.type === 'risk_analysis' && evidence.data) {
            evidenceDetails += `
   - Risk Score: ${evidence.data.risk_score}%
   - Analysis: ${evidence.data.analysis_result}
   - Technical Details: AI-powered infringement detection`;
          }
          
          if (evidence.type === 'html_content' && evidence.data) {
            evidenceDetails += `
   - Page Title: ${evidence.data.page_title || 'N/A'}
   - Page URL: ${evidence.data.page_url || 'N/A'}
   - HTML Content: Preserved for technical analysis`;
          }
          
          evidenceDetails += `
   - Collected: ${evidence.createdAt}
   - Auto-Generated: ${evidence.autoGenerated ? 'Yes' : 'No'}`;
        });
        
        evidenceDetails += `

EVIDENCE INTEGRITY:
- All evidence collected through automated surveillance system
- Screenshots and HTML content preserved with timestamps
- Chain of custody maintained for legal proceedings
- Technical metadata available for expert analysis`;
      }
    }

    return `Generate a professional ${documentType.replace('_', ' ')} letter with the following details:

IP ASSET INFORMATION:
- Type: ${ipAsset.type}
- Title: ${ipAsset.title}
- Description: ${ipAsset.description}
- Registration Number: ${ipAsset.registration_number || 'Not specified'}
- Owner: ${ipAsset.owner || 'IP Asset Owner'}
- Jurisdiction: ${ipAsset.jurisdiction || jurisdiction}

${evidenceDetails}

CASE DETAILS:
- Case ID: ${caseDetails?.id || 'N/A'}
- Case Title: ${caseDetails?.title || 'IP Infringement Case'}
- Priority: ${caseDetails?.priority || 'Medium'}

DOCUMENT REQUIREMENTS:
- Jurisdiction: ${jurisdiction}
- Tone: ${tone}
- Include proper legal formatting
- Add placeholder for signature
- Include contact information section
- Set appropriate deadline for response

Please generate a complete, professional legal document that addresses this IP infringement matter.`;
  }

  async validateDocument(content, documentType) {
    console.log(`[LegalDraftAgent] Validating generated ${documentType}`);
    
    // Basic validation checks
    const validationChecks = {
      hasHeader: content.includes('CEASE AND DESIST') || content.includes('DMCA') || content.includes('NOTICE'),
      hasRecipient: content.includes('To:') || content.includes('Dear'),
      hasLegalBasis: content.includes('intellectual property') || content.includes('copyright') || content.includes('trademark'),
      hasDeadline: content.includes('days') || content.includes('deadline') || content.includes('respond'),
      hasSignature: content.includes('Sincerely') || content.includes('Regards') || content.includes('Signature'),
      minLength: content.length > 500
    };

    const passedChecks = Object.values(validationChecks).filter(Boolean).length;
    const totalChecks = Object.keys(validationChecks).length;
    const validationScore = (passedChecks / totalChecks) * 100;

    console.log(`[LegalDraftAgent] Validation score: ${validationScore}%`);

    return {
      isValid: validationScore >= 80,
      score: validationScore,
      checks: validationChecks,
      recommendations: this.getValidationRecommendations(validationChecks)
    };
  }

  getValidationRecommendations(checks) {
    const recommendations = [];
    
    if (!checks.hasHeader) recommendations.push('Add clear document header/title');
    if (!checks.hasRecipient) recommendations.push('Include proper recipient addressing');
    if (!checks.hasLegalBasis) recommendations.push('Strengthen legal basis and IP rights description');
    if (!checks.hasDeadline) recommendations.push('Include specific deadline for response');
    if (!checks.hasSignature) recommendations.push('Add proper closing and signature section');
    if (!checks.minLength) recommendations.push('Expand document content for completeness');

    return recommendations;
  }
}

export default LegalDraftAgent;